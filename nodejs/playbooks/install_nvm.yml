---
- name: Install Node Version Manager (nvm)
  hosts: localhost
  connection: local
  vars:
    arch_mapping:  # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64
    nvm_install_dir: "{{ ansible_env.HOME }}/.nvm"
    nvm_user_home: "{{ ansible_env.HOME }}"
  tasks:
    - name: Install nvm on Linux/MacOS
      block:
        - name: App home
          ansible.builtin.file:
            path: "{{ nvm_install_dir }}"
            state: directory

        - name: Fetch latest NVM version from GitHub releases
          ansible.builtin.uri:
            url: "https://api.github.com/repos/nvm-sh/nvm/releases/latest"
            return_content: yes
            headers:
              Accept: "application/vnd.github.v3+json"
          register: nvm_version_response

        - name: Parse latest Helm version
          ansible.builtin.set_fact:
            latest_nvm_version: "{{ nvm_version_response.json.tag_name | regex_replace('^v', '') }}"

        - name: Set version
          ansible.builtin.set_fact:
            nvm_version: "{{ (req_nvm_version == 'latest') | ternary(latest_nvm_version, req_nvm_version)}}"

        - name: Download nvm installation script
          get_url:
            url: "https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh"
            dest: "{{ nvm_install_dir }}/install.sh"

        - name: Run nvm installation script
          shell: bash "{{ nvm_install_dir }}/install.sh"
          environment:
            NVM_DIR: "{{ nvm_user_home }}/.nvm"

      when: "ansible_system | lower in ['linux', 'darwin']"

    - name: Install nvm on Windows
      block:
        - name: Download nvm installation script
          win_get_url:
            url: "https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_version }}/install.ps1"
            dest: "{{ nvm_install_dir }}/install.ps1"

        - name: Run nvm installation script
          win_shell: powershell -ExecutionPolicy Bypass -File "{{ nvm_install_dir }}/install.ps1"
          args:
            creates: "{{ nvm_user_home }}/AppData/Roaming/nvm"

        - name: Load nvm in the current shell session
          win_shell: Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          when: nvm_set_execution_policy

        - name: Load nvm in the current shell session
          win_shell: |
            $env:Path += ";" + [System.IO.Path]::Combine("{{ nvm_user_home }}", "AppData\Roaming\nvm")
          when: not nvm_set_execution_policy

      vars:
        nvm_version: "v0.38.0"
        nvm_install_dir: "{{ ansible_env.HOME }}/.nvm"
        nvm_user_home: "{{ ansible_env.HOME }}"
        nvm_set_execution_policy: "{{ ansible_os_family | lower == 'windows' }}"
      when: "ansible_system | lower == 'windows'"
