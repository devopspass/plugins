---
- name: Install Terraform
  hosts: localhost
  connection: local
  vars:
    arch_mapping:  # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64
  tasks:
    - name: Base tasks
      ansible.builtin.include_tasks:
        file: "../../_common/playbooks/base.yml"

    - name: Fetch latest Terraform version from HashiCorp releases API
      ansible.builtin.uri:
        url: "https://checkpoint-api.hashicorp.com/v1/check/terraform"
        return_content: yes
      register: terraform_version_response

    - name: Parse latest Terraform version
      ansible.builtin.set_fact:
        latest_terraform_version: "{{ terraform_version_response.content | from_json | json_query('current_version') }}"

    - name: Set version
      ansible.builtin.set_fact:
        terraform_version: "{{ (req_terraform_version == 'latest') | ternary(latest_terraform_version, req_terraform_version)}}"

    - name: Set facts based on operating system
      ansible.builtin.set_fact:
        terraform_download_url: "https://releases.hashicorp.com/terraform/{{terraform_version}}/terraform_{{terraform_version}}_{{ ansible_system | lower }}_{{ arch_mapping[ansible_architecture] }}.zip"

#####################################################################
#
#           Linux/MacOS
#
#####################################################################
    - name: Install Terraform on macOS/Linux
      block:
        - name: Download Terraform binary
          get_url:
            url: "{{ terraform_download_url }}"
            dest: "{{ dop_temp }}/terraform.zip"
            mode: '0644'

        - name: Unzip Terraform binary
          ansible.builtin.unarchive:
            src: "{{ dop_temp }}/terraform.zip"
            dest: "{{ dop_bin }}"
            remote_src: true

        - name: Set execute permissions
          ansible.builtin.file:
            path: "{{ dop_bin }}/terraform"
            mode: 'a+x'

        - name: Clean up temporary files
          ansible.builtin.file:
            path: "{{ dop_temp }}/terraform.zip"
            state: absent
      when: "'Darwin' in ansible_system or 'Linux' in ansible_system"

#####################################################################
#
#           Windows
#
#####################################################################
    - name: Install Terraform on Windows
      when: "'Windows' in ansible_system"
      block:
        - name: Download Terraform binary
          get_url:
            url: "{{ terraform_download_url }}"
            dest: "{{ dop_temp }}\\\\terraform.zip"

        - name: Unzip Terraform binary
          ansible.builtin.command:
            cmd: "tar -xf terraform.zip -C '{{ dop_bin }}'"
            chdir: "{{ dop_temp }}"

    - name: Installed
      ansible.builtin.debug:
        msg: "Installed Terraform version '{{ terraform_version }}'"
